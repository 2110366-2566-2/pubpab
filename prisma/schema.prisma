generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model accommodation {
  accommodation_id     String     @id @default(uuid()) @db.VarChar(36)
  host_id              String     @db.VarChar(36)
  qr_code              String?
  name_a               String     @db.VarChar(64)
  description_a        String
  price                Int
  banner               String?
  address_a            String
  city                 String     @db.VarChar(64)
  province             String     @db.VarChar(64)
  distinct_a           String     @db.VarChar(64)
  postal_code          String     @db.Char(5)
  ggmap_link           String?
  rating               Float      @default(0)
  accommodation_status a_status   @default(CLOSE)
  host                 host       @relation(fields: [host_id], references: [host_id], onDelete: Cascade)
  feedback             feedback[]
  room                 room[]
}

model admin {
  admin_id   String     @id @db.VarChar(36)
  admin_type admintypes
  users      users      @relation(fields: [admin_id], references: [user_id], onDelete: Cascade)
  host       host[]
}

// model attachment {
//   message_id  String   @db.VarChar(36)
//   chatroom_id String   @db.VarChar(36)
//   picture     Bytes
//   messages    messages @relation(fields: [message_id, chatroom_id], references: [message_id, chatroom_id], onDelete: Cascade)

//   @@id([message_id, chatroom_id])
// }

// model chat {
//   host_id     String   @db.VarChar(36)
//   traveler_id String   @db.VarChar(36)
//   chatroom_id String   @db.VarChar(36)
//   chatroom    chatroom @relation(fields: [chatroom_id], references: [chatroom_id], onDelete: Cascade)
//   host        host     @relation(fields: [host_id], references: [host_id], onDelete: Cascade)
//   traveler    traveler @relation(fields: [traveler_id], references: [traveler_id], onDelete: Cascade)

//   @@id([host_id, traveler_id, chatroom_id])
// }

model chatroom {
  chatroom_id   String   @id @default(uuid()) @db.VarChar(36)
  host_id       String   @db.VarChar(36)
  traveler_id   String   @db.VarChar(36)
  host          host     @relation(fields: [host_id], references: [host_id], onDelete: Cascade)
  traveler      traveler @relation(fields: [traveler_id], references: [traveler_id], onDelete: Cascade)
  createdAt     DateTime @default(now()) @db.Timestamp(6)
  updatedAt     DateTime @default(now()) @db.Timestamp(6)
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model feedback {
  feedback_id      String        @id @default(uuid()) @db.VarChar(36)
  traveler_id      String        @db.VarChar(36)
  accommodation_id String        @db.VarChar(36)
  picture          String?
  timestamp        DateTime      @default(now()) @db.Timestamp(6)
  text             String?
  score            Float?
  accommodation    accommodation @relation(fields: [accommodation_id], references: [accommodation_id], onDelete: Cascade)
  traveler         traveler      @relation(fields: [traveler_id], references: [traveler_id], onDelete: Cascade)
}

model host {
  host_id       String          @id @db.VarChar(36)
  admin_id      String?         @db.VarChar(36)
  bank_account  String?         @db.VarChar(255)
  accommodation accommodation[]
  chat          chatroom[]
  admin         admin?          @relation(fields: [admin_id], references: [admin_id], onDelete: NoAction, onUpdate: NoAction)
  users         users           @relation(fields: [host_id], references: [user_id], onDelete: Cascade)
}

model messages {
  message_id  String      @default(uuid()) @db.VarChar(36)
  chatroom_id String      @db.VarChar(36)
  sender_id   String      @db.VarChar(36)
  timestamp   DateTime    @default(now()) @db.Timestamp(6)
  text        String  
  // attachment  attachment?
  users       users       @relation(fields: [sender_id], references: [user_id], onDelete: Cascade)
  // text        text?

  @@id([message_id, chatroom_id])
}

model notification {
  notification_id   String   @id @default(uuid()) @db.VarChar(36)
  user_id           String   @db.VarChar(36)
  reservation_id    String   @db.VarChar(36)
  timestamp         DateTime @default(now()) @db.Timestamp(6)
  notification_type n_type
  users             users    @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  reserve           reserve  @relation(fields: [reservation_id], references: [reservation_id], onDelete: Cascade)
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model payment {
  payment_id        String    @id @default(uuid()) @db.VarChar(36)
  timestamp         DateTime  @default(now()) @db.Timestamp(6)
  amount            Float
  host_bank_account String    @db.VarChar(36)
  payment_status    pm_status @default(Waiting)
  qrcode_payment    String?
  reserve           reserve[]
}

model problem {
  problem_id     String        @id @default(uuid()) @db.VarChar(36)
  user_id        String        @db.VarChar(36)
  text           String?
  topic          String
  timestamp      DateTime      @default(now()) @db.Timestamp(6)
  problem_status problemstatus
  users          users         @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
}

model reserve {
  reservation_id  String         @id @default(uuid()) @db.VarChar(36)
  room_id         String         @db.VarChar(36)
  traveler_id     String         @db.VarChar(36)
  payment_id      String         @db.VarChar(36)
  timestamp       DateTime       @default(now()) @db.Timestamp(6)
  start_date      DateTime       @db.Date
  end_date        DateTime       @db.Date
  check_in_status cn_status      @default(Not_checkin)
  room            room           @relation(fields: [room_id], references: [room_id], onDelete: Cascade)
  traveler        traveler       @relation(fields: [traveler_id], references: [traveler_id], onDelete: Cascade)
  payment         payment        @relation(fields: [payment_id], references: [payment_id], onDelete: Cascade)
  notification    notification[]
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model room {
  room_id          String         @id @default(uuid()) @db.VarChar(36)
  accommodation_id String         @db.VarChar(36)
  room_name        String         @db.VarChar(64)
  price            Int
  floor            Int
  is_reserve       Boolean
  room_no          String
  smoking          Boolean
  noise            Boolean
  pet              Boolean
  washing_machine  Boolean
  bed_type         b_type
  restroom         Boolean
  wifi_available   Boolean
  max_adult        Int
  max_children     Int
  banner           String?
  reserve          reserve[]
  accommodation    accommodation? @relation(fields: [accommodation_id], references: [accommodation_id], onDelete: Cascade)
}

// model text {
//   message_id  String   @db.VarChar(36)
//   chatroom_id String   @db.VarChar(36)
//   text        String  
//   messages    messages @relation(fields: [message_id, chatroom_id], references: [message_id, chatroom_id], onDelete: Cascade)

//   @@id([message_id, chatroom_id])
// }

model traveler {
  traveler_id String     @id @db.VarChar(36)
  chat        chatroom[]
  feedback    feedback[]
  reserve     reserve[]
  users       users      @relation(fields: [traveler_id], references: [user_id], onDelete: Cascade)
}

model users {
  user_id       String         @id @default(uuid()) @db.VarChar(36)
  citizen_id    String?        @unique @db.Char(13)
  first_name    String?        @db.VarChar(64)
  last_name     String?        @db.VarChar(64)
  email         String         @unique
  password_hash String         @db.VarChar(255)
  birth_date    DateTime?      @db.Date
  age           Int?
  user_type     users_type
  phone_no      String?        @db.Char(10)
  gender        genders?
  banner        String?
  admin         admin?
  host          host?
  messages      messages[]
  problem       problem[]
  notification  notification[]
  traveler      traveler?
}

enum a_status {
  OPEN
  CLOSE
}

enum admintypes {
  Verified_Admin @map("Verified Admin")
  Support_Admin  @map("Support Admin")
}

enum b_type {
  KING
  QUEEN
}

enum n_type {
  Reminder
  Cancellation
  Reservation
}

enum genders {
  M
  F
}

enum pm_status {
  Waiting
  Ongoing
  Success
  Fail
}

enum problemstatus {
  Pending
  Solved
}

enum cn_status {
  Not_checkin
  Checkin
  Cancel
}

enum users_type {
  Admins
  Travelers
  Hosts
}
